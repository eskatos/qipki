
QiPKI
=====


Next steps

  DONE Finish applying DCI in every existing rest resource

  DONE Finish KeyStoreFactory implementation

  DONE Refactor CAFactory to use the role implementation

  DONE Implement CA KeyPair generation and self-signing

  DONE Refactored KeyStoreEntity in CryptoStore*

  DONE Apply CAFactory refactoring to PKCS10 Signing

  DONE Move roles into domain layer

  DONE Serve crl on /ca/{identity}/crl

  DONE Model RootCA, SubCA, EndEntity domain objects

  DONE Store issued certificates locally and serve them on /ca/{identity}/x509 ???

  DONE Add criticality handling on every X509Extension

  DONE Refactor CryptoTools as services

  DONE Use plain BouncyCastle for hash calulations (see RestletValuesFactory)

  DONE Refactor CAFactoryResource to use 302/GET on x509 like other creational resources

  DONE Refactor PKCS10SignerResource so it becomes a X509FactoryResource and take parameters around the pkcs10 request
    Create X509FactoryResource
    Remove PKCS10SignerResource

  BUG: generated URIs seems wrong but everything is working, see unit tests logs

  Add /ca/{identity}/x509revoker
    Seems wrong according to DCI
    Move to /x509/{identity}/revoke

  Write CryptoStoreFactoryResource and CAFactoryResource unit tests

  QUID? @SideEffects: synchronous or asynchronous, currentUnitOfWork or newUnitOfWork ?

  Factorize Values factories ???
    Common interfaces, Rest values having HasURI
    Maybe have sort of reusable ValuePrototypeFeeders with module Visibility

  State on commons/core modules and on basic crypto code/services location
    Questions
      Add crypto mixins to rest params ?
        It is nice server side, try to find a way to augment params Values server side only

  Fix domain objects visibility

  Write qi4j client library for cryptostore/ca/csr/certificates/revocation
    QiPkiIURIBuilder : fluent interface to build qipki rest api URIs
      Immutables QiPkiIURIBuilders sharing a StringBuilderF

  Package as a unix daemon

  Release 0.1

  Use @Concerns to factorize Resources (error handling, logging etc..)
    Finish WrongParamatersBuilder and integrate in resources concerns
    Remove loggings from unit tests, the server logs, the client only use http

  Add shiro
    Model with one root Role and Permissions, other Roles will emerge themselves later
    See if programmatic security algorithms (vs. annotations) fits well in DCI Contexts

  Apply qi4j data migration system to learn it

  Add a domain auditing bounded context filled by @SideEffects

  Simple Client/UI reflecting naive rest api list/factory/entity
    Example: request to x509 factory is presented with two fields
      ComboBox: choose Fca in list
      TextArea: paste pkcs10 pem



X.509 Extensions Documents

	http://www.ietf.org/rfc/rfc2459.txt
	http://www.openssl.org/docs/apps/x509.html#CERTIFICATE_EXTENSIONS

	MORTELISSIME
	http://www.redhat.com/docs/manuals/cert-system/8.0/admin/html/Certificate_and_CRL_Extensions.html

	NETSCAPE
	http://www.mozilla.org/projects/security/pki/nss/tech-notes/tn3.html



Task Scheduling

  qi4j-lib-taskqueue
    hard to implement in a typesafe way because of java type erasure
    http://www.developpez.net/forums/d435282/java/general-java/langage/possibilite-dacceder-type-generique-runtime/#post2630861
    -> find a less clever but more pragmatic way


Client UI

  resource my/tasks
    list
    horizontal sliding view
    differenciate with tags so clients could choose icons/styling
    provide (rss?) feed


