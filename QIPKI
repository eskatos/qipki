
QiPKI
=====


Next steps

  DONE Finish applying DCI in every existing rest resource

  DONE Finish KeyStoreFactory implementation

  DONE Refactor CAFactory to use the role implementation

  DONE Implement CA KeyPair generation and self-signing

  DONE Refactored KeyStoreEntity in CryptoStore*

  DONE Apply CAFactory refactoring to PKCS10 Signing

  DONE Move roles into domain layer

  DONE Serve crl on /ca/{identity}/crl

  DONE Model RootCA, SubCA, EndEntity domain objects

  DONE Store issued certificates locally and serve them on /ca/{identity}/x509 ???

  DONE Add criticality handling on every X509Extension

  DONE Refactor CryptoTools as services

  DONE Use plain BouncyCastle for hash calulations (see RestletValuesFactory)

  DONE Refactor CAFactoryResource to use 302/GET on x509 like other creational resources

  DONE Refactor PKCS10SignerResource so it becomes a X509FactoryResource and take parameters around the pkcs10 request
    Create X509FactoryResource
    Remove PKCS10SignerResource

  DONE Add 404 (NoSuchEntityException) and 400 (WrongParametersExtension) handling in RestletApplication

  DONE Add /ca/{identity}/x509revoker
    Seems wrong according to DCI & REST
    Move to /x509/{identity}/revocation
    Add the revocation URI in X509Value

  DONE Augment ApiRootResource so that it returns all base URIs in json and refactor unit test so that there's no hardcoded path anymore

  DONE Use CryptoStoreFactoryResource and CAFactoryResource in unit tests

  DONE State on commons/core modules and on basic crypto code/services location

  DONE Fix domain objects visibility

  DONE BUG: generated URIs seems wrong but everything is working, see unit tests logs

  DONE Add ExtendedKeyUsage and NetscapeCertType in X509DetailValue

  DONE Refactor X509ExtensionsValueFactory so that we expose internal code needed to build X509Profile

  DONE Write a UriEntityResolver that does the exact oposite of UriBuilder so that client manipulate only URIs and no Identity strings

  DONE Refactor resources, client code and unit tests so that they use only URIs and no Identity

  DONE Think about ParamsValues that will now contains URIs only and no Identity
    --> Contexts don't consume ParamsValues but real parameters

  IN_PROGESS Write qi4j client library for cryptostore/ca/csr/certificates/revocation
    QiPkiIURIBuilder : fluent interface to build qipki rest api URIs
      Immutables QiPkiIURIBuilders sharing a StringBuilder
    QiPkiCAClientAssembler : assemble everything is needed in a single qi4j module

  IN_PROGESS  Add support for certificate profiles
    X509ProfileAssignment aggregated in CA so that when removing a ca, it removes its assignments but still needs to handle X509Profile deletion manually
    TODO Model as a CA subresource so client can POST on it to update CA assignments
        /ca/{identity}/profiles return a list of profiles, POST update this list
    Write X509ProfileFactory, certainly needs several iterations so that the code is not plumbed with extensions handling.

  Move FactoryResources as post in ListResources

  Add tools resources, for example a resource that parse a given x509 certificate and return a X509DetailValue
    With this we can write unit tests for certificate parsing using a bunch of external certificates

  Add Netscape extensions handling
    In X509DetailValue : all of them
    In X509Profile
        Netscape Certificate Comment
    Automatically filled by CAs
        Netscape CA Revocation URL
            Only on CA certificates
            With only the CRL endpoint of the issuing CA
            It feels weird .... is this really necessary ?

  Package as a unix daemon


  Release 0.1

  Add support for key escrow

  Use @Concerns to factorize Resources (error handling, logging etc..)
    Finish WrongParamatersBuilder and integrate in resources concerns
    Remove loggings from unit tests, the server logs, the client only use http

  Add shiro
    Model with one root Role and Permissions, other Roles will emerge themselves later
    See if programmatic security algorithms (vs. annotations) fits well in DCI Contexts

  Apply qi4j data migration system to learn it

  Add a domain auditing bounded context filled by @SideEffects

  Wrap client api as a small qi4j application usable without qi4j imports

  Simple Client/UI reflecting naive rest api list/factory/entity
    Example: request to x509 factory is presented with two fields
      ComboBox: choose Fca in list
      TextArea: paste pkcs10 pem



X.509 Extensions Documents

	http://www.ietf.org/rfc/rfc2459.txt
	http://www.openssl.org/docs/apps/x509.html#CERTIFICATE_EXTENSIONS

	MORTELISSIME
	http://www.redhat.com/docs/manuals/cert-system/8.0/admin/html/Certificate_and_CRL_Extensions.html

	NETSCAPE
	http://www.mozilla.org/projects/security/pki/nss/tech-notes/tn3.html


    extendedKeyUsage : FUCK, need to find reliable info about this
        Two interpretations as to what extended key usage values mean when set in a CA certificate
            • Certificate can be used for the indicated usage
                – Interpretation used by PKIX, some vendors
            • Certificate can issue certificates with the given usage
                – Interpretation used by Netscape, Microsoft, other vendors
        As usual, PKI people are split 50:50 on this

    netscapeCertType
        Discontinued since 10 years ... is it needed ?

    privateKeyUsagePeriod
        Disallowed by the PKIX profile, although no-one can provide a reason for this

    nameConstraints
        On CA only
        Constrain the DN subtree under which a CA can issue certificates

        Name constraints can be avoided through creative name encoding (Problem in standards)
            • Multiple encodings for the same character, zero-width spaces, floating diacritics, etc
            • Can make identical-appearing strings compare as different strings
            • Can also evade name constraints by using altNames




Task Scheduling

  qi4j-lib-taskqueue
    hard to implement in a typesafe way because of java type erasure
    http://www.developpez.net/forums/d435282/java/general-java/langage/possibilite-dacceder-type-generique-runtime/#post2630861
    -> find a less clever but more pragmatic way


Client UI

  resource my/tasks
    list
    horizontal sliding view
    differenciate with tags so clients could choose icons/styling
    provide (rss?) feed



Basic Certificates Profiles
    TODO: work on SubCAs profiles

RootCAThatDoesEverything ...  :|

    BC  CA, pathLen=0
    KU  cRLSign | keyCertSign
    NCT sslCA | objectSigningCA | smimeCA


SSL Server Certificates

    BC  NonCA, pathLen=0
    KU  digitalSignature | keyEncipherment
    EKU serverAuth, clientAuth
    NCT sslServer


SSL Client Certificates

    BC  NonCA, pathLen=0
    KU  digitalSignature | keyEncipherment
    EKU clientAuth
    NCT sslClient


Object & S/MIME Signing Certificates

    BC  NonCA, pathLen=0
    KU  digitalSignature | nonRepudiation
    EKU emailProtection
    NCT objectSigning | smime


Key Encipherment & S/MIME Encipherment Certificates

    BC  NonCA, pathLen=0
    KU  keyEncipherment
    EKU emailProtection
    NCT smime




